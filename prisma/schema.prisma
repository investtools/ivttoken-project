generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Schools {
    id                        String                   @id @default(uuid())
    name                      String
    state                     String
    city                      String
    zipCode                   String
    address                   String
    tokens                    String?
    cnpj                      String                   @unique
    inepCode                  String                   @unique
    email                     String                   @unique
    lat                       String?
    lon                       String?
    role                      Role
    administrator             Administrators
    internetServiceProviderId String?
    contracts                 Contracts[]
    connectivityReport        ConnectivityReport[]
    internetServiceProvider   InternetServiceProvider? @relation(fields: [internetServiceProviderId], references: [id])
    createdAt                 DateTime                 @default(now())
    updatedAt                 DateTime                 @updatedAt

    @@index([cnpj])
    @@index([email])
    @@index([city])
    @@index([state])
    @@index([internetServiceProviderId])
}

model ConnectivityReport {
    id                     String            @id @default(uuid())
    month                  Months
    noInternetDays         Int
    connectionQuality      ConnectionQuality
    averageSpeed           Int
    connectivityPercentage String
    schoolId               String
    school                 Schools           @relation(fields: [schoolId], references: [id])
    createdAt              DateTime          @default(now())
    updatedAt              DateTime          @updatedAt
}

model Admin {
    id              String            @id @default(uuid())
    name            String
    entity          Entity
    email           String            @unique
    role            Role
    contracts       Contracts[]
    authorizedUsers AuthorizedUsers[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt

    @@index([email])
}

model InternetServiceProvider {
    id                String              @id @default(uuid())
    name              String
    cnpj              String              @unique
    tokenAmount       String
    unlockedTokens    String
    lockedTokens      String
    spentTokens       String
    email             String              @unique
    role              Role
    schools           Schools[]
    tokenTransactions TokenTransactions[]
    contracts         Contracts[]
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt

    @@index([email])
    @@index([cnpj])
}

model TokenTransactions {
    id                        String                  @id @default(uuid())
    benefit                   Benefits
    benefitPrice              String
    internetServiceProviderId String
    internetServiceProvider   InternetServiceProvider @relation(fields: [internetServiceProviderId], references: [id])
    createdAt                 DateTime                @default(now())
    updatedAt                 DateTime                @updatedAt

    @@index([internetServiceProviderId])
}

model Contracts {
    id                        String                  @id @default(uuid())
    schoolsId                 String
    internetServiceProviderId String
    status                    Status
    adminId                   String?
    admin                     Admin?                  @relation(fields: [adminId], references: [id])
    internetServiceProvider   InternetServiceProvider @relation(fields: [internetServiceProviderId], references: [id])
    school                    Schools                 @relation(fields: [schoolsId], references: [id])
    transactionsToSign        TransactionsToSign[]
    signedTransactions        SignedTransactions[]
    createdAt                 DateTime                @default(now())
    updatedAt                 DateTime                @updatedAt

    @@index([internetServiceProviderId])
    @@index([schoolsId])
}

model AuthorizedUsers {
    id                String   @id @default(uuid())
    email             String   @unique
    role              Role
    adminId           String
    authorizedByAdmin Admin    @relation(fields: [adminId], references: [id])
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model TransactionsToSign {
    id              String    @id @default(uuid())
    transactionHash String    @unique
    signatures      String[]
    contractId      String
    contract        Contracts @relation(fields: [contractId], references: [id])
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model SignedTransactions {
    id              String    @id @default(uuid())
    transactionHash String    @unique
    signatures      String[]
    contractId      String
    contract        Contracts @relation(fields: [contractId], references: [id])
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model SchoolsToBeApproved {
    id            String         @id @default(uuid())
    name          String
    state         String
    city          String
    zipCode       String
    address       String
    cnpj          String         @unique
    inepCode      String         @unique
    email         String         @unique
    role          Role
    administrator Administrators
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@index([cnpj])
    @@index([email])
    @@index([city])
    @@index([state])
}

model InternetServiceProviderToBeApproved {
    id        String   @id @default(uuid())
    name      String
    cnpj      String   @unique
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
    @@index([cnpj])
}

model Tickets {
    id        String   @id @default(uuid())
    name      String
    email     String
    subject   String
    message   String
    isOpen    Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
}

enum ConnectionQuality {
    LOW
    MEDIUM
    HIGH
}

enum Months {
    JAN
    FEB
    MAR
    APR
    MAY
    JUN
    JUL
    AUG
    SEP
    OCT
    NOV
    DEC
}

enum Entity {
    GOVERNMENT
    GIGA
    UNICEF
    INVESTTOOLS
}

enum Status {
    PENDING
    APPROVED
    DENIED
}

enum Administrators {
    MUNICIPALITY
    STATE
}

enum Benefits {
    TAX_BREAK
}

enum Role {
    ADMIN
    ISP
}
